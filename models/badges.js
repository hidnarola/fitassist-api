//Require Mongoose
var mongoose = require("mongoose");

//Define a schema
var Schema = mongoose.Schema;

var BadgesSchema = new Schema(
  {
    name: { type: String, required: true },
    descriptionCompleted: {
      type: String,
      default: "congratulations you have earned badge"
    },
    descriptionInCompleted: { type: String, default: "" },
    unit: {
      type: String,
      enum: [
        "n/a",
        "cm",
        "feet",
        "kg",
        "lb",
        "percentage",
        "in",
        "number",
        "hour",
        "minute",
        "meter",
        "km",
        "mile",
        "g",
        "mg"
      ],
      default: 0,
      required: true
    },
    baseUnit: { type: String },
    baseValue: { type: Number, default: 0, required: true },
    value: { type: Number, default: 0, required: true },
    task: {
      type: String,
      enum: [
        "profile_update",
        "friends",
        "post",
        "weight_gain",
        "weight_loss",
        "body_fat_gain",
        "body_fat_loss",
        "body_fat_average",
        "body_fat_most",
        "body_fat_least",
        "neck_measurement_gain",
        "neck_measurement_loss",
        "shoulders_measurement_gain",
        "shoulders_measurement_loss",
        "chest_measurement_gain",
        "chest_measurement_loss",
        "upper_arm_measurement_gain",
        "upper_arm_measurement_loss",
        "waist_measurement_gain",
        "waist_measurement_loss",
        "forearm_measurement_gain",
        "forearm_measurement_loss",
        "hips_measurement_gain",
        "hips_measurement_loss",
        "thigh_measurement_gain",
        "thigh_measurement_loss",
        "calf_measurement_gain",
        "calf_measurement_loss",
        "weight_lifted_total",
        "weight_lifted_average",
        "weight_lifted_most",
        "weight_lifted_least",
        "workouts_total",
        "workouts_average",
        "reps_least",
        "reps_total",
        "reps_average",
        "reps_most",
        "sets_least",
        "sets_total",
        "sets_average",
        "sets_most",
        "running_distance_total",
        "running_distance_average",
        "running_distance_most",
        "running_distance_least",
        "running_time_average",
        "running_time_total",
        "running_elevation_total",
        "running_elevation_average",
        "heart_rate_total",
        "heart_rate_average",
        "heart_rate_most",
        "heart_rate_least",
        "heart_rate_resting_total",
        "heart_rate_resting_average",
        "heart_rate_resting_most",
        "heart_rate_resting_least",
        "cycle_distance_total",
        "cycle_distance_average",
        "cycle_distance_most",
        "cycle_distance_least",
        "cycle_time_total",
        "cycle_time_average",
        "cycle_elevation_total",
        "cycle_elevation_average",
        "steps_total",
        "steps_average",
        "steps_most",
        "steps_least",
        "calories_total",
        "calories_average",
        "calories_most",
        "calories_least",
        "calories_excess",
        "fat_saturated_total",
        "fat_saturated_average",
        "fat_saturated_most",
        "fat_saturated_least",
        "fat_saturated_excess",
        "fat_trans_total",
        "fat_trans_average",
        "fat_trans_most",
        "fat_trans_least",
        "fat_trans_excess",
        "folate_total",
        "folate_average",
        "folate_most",
        "folate_least",
        "folate_excess",
        "potassium_total",
        "potassium_average",
        "potassium_most",
        "potassium_least",
        "potassium_excess",
        "magnesium_total",
        "magnesium_average",
        "magnesium_most",
        "magnesium_least",
        "magnesium_excess",
        "sodium_total",
        "sodium_average",
        "sodium_most",
        "sodium_least",
        "sodium_excess",
        "protein_total",
        "protein_average",
        "protein_most",
        "protein_least",
        "protein_excess",
        "calcium_total",
        "calcium_average",
        "calcium_most",
        "calcium_least",
        "calcium_excess",
        "carbs_total",
        "carbs_average",
        "carbs_most",
        "carbs_least",
        "carbs_excess",
        "cholesterol_total",
        "cholesterol_average",
        "cholesterol_most",
        "cholesterol_least",
        "cholesterol_excess",
        "fat_polyunsaturated_total",
        "fat_polyunsaturated_average",
        "fat_polyunsaturated_most",
        "fat_polyunsaturated_least",
        "fat_polyunsaturated_excess",
        "cholesterol_total",
        "cholesterol_average",
        "cholesterol_most",
        "cholesterol_least",
        "cholesterol_excess",
        "fat_monounsaturated_total",
        "fat_monounsaturated_average",
        "fat_monounsaturated_most",
        "fat_monounsaturated_least",
        "fat_monounsaturated_excess",
        "fat_polyunsaturated_total",
        "fat_polyunsaturated_average",
        "fat_polyunsaturated_most",
        "fat_polyunsaturated_least",
        "fat_polyunsaturated_excess",
        "iron_total",
        "iron_average",
        "iron_most",
        "iron_least",
        "iron_excess",
        "sodium_total",
        "sodium_average",
        "sodium_most",
        "sodium_least",
        "sodium_excess",
        "protein_total",
        "protein_average",
        "protein_most",
        "protein_least",
        "protein_excess",
        "fiber_total",
        "fiber_average",
        "fiber_most",
        "fiber_least",
        "fiber_excess"
      ],
      required: true
    },
    timeType: {
      type: String,
      enum: ["standard", "time_window"],
      default: "standard"
    },
    duration: { type: Object, default: null },
    point: { type: Number, required: true, default: 0 },
    status: { type: Number, default: 1 },
    isDeleted: { type: Number, default: 0 },
    createdAt: { type: Date, default: Date.now },
    modifiedAt: { type: Date, default: Date.now }
  },
  { versionKey: false }
);

// Compile model from schema
var Badges = mongoose.model("badges", BadgesSchema, "badges");

module.exports = Badges;
